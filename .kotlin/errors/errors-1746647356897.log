kotlin version: 2.1.10
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: D:/Projects/LinguaFlow/core/common/src/main/java/com/example/yaroslavhorach/common/utill/PermissionManager.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:48)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:55)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:42)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:28)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:192)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.runBackend(jvmCompilerPipeline.kt:80)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileModule(jvmCompilerPipelineLightTree.kt:264)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileSingleModuleUsingFrontendIrAndLightTree(jvmCompilerPipelineLightTree.kt:231)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipelineLightTree.kt:86)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:146)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:102)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.kt:316)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally$lambda$9$compile(IncrementalCompilerRunner.kt:249)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally(IncrementalCompilerRunner.kt:267)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:120)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:683)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1811)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:AskPermission visibility:public modality:FINAL <> ($this:com.example.yaroslavhorach.common.utill.PermissionManager, permission:kotlin.String, onResult:kotlin.Function1<kotlin.Boolean, kotlin.Unit>) returnType:kotlin.Unit
  annotations:
    Composable
  $this: VALUE_PARAMETER name:<this> type:com.example.yaroslavhorach.common.utill.PermissionManager
  VALUE_PARAMETER name:permission index:0 type:kotlin.String
  VALUE_PARAMETER name:onResult index:1 type:kotlin.Function1<kotlin.Boolean, kotlin.Unit>
  BLOCK_BODY
    VAR name:context type:android.content.Context [val]
      CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=android.content.Context origin=GET_PROPERTY
        $this: TYPE_OP type=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal>
          CALL 'public final fun <get-LocalContext> (): androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> declared in androidx.compose.ui.platform.AndroidCompositionLocals_androidKt' type=androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> origin=GET_PROPERTY
    BLOCK type=kotlin.Unit origin=WHEN
      VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.String [val]
        GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
      WHEN type=kotlin.Unit origin=WHEN
        BRANCH
          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.String [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
            arg1: CONST String type=kotlin.String value="android.permission.WRITE_EXTERNAL_STORAGE"
          then: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                  arg0: GET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:SDK_INT type:kotlin.Int visibility:public [final,static] declared in android.os.Build.VERSION' type=kotlin.Int superQualifierSymbol=android.os.Build.VERSION origin=null
                  arg1: CONST Int type=kotlin.Int value=29
                then: BLOCK type=kotlin.Unit origin=null
                  CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 [operator] declared in kotlin.Function1' type=kotlin.Unit origin=INVOKE
                    $this: GET_VAR 'onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=VARIABLE_AS_FUNCTION
                    p1: CONST Boolean type=kotlin.Boolean value=true
                  RETURN type=kotlin.Nothing from='public final fun AskPermission (permission: kotlin.String, onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in com.example.yaroslavhorach.common.utill.PermissionManager'
                    GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:INSTANCE type:kotlin.Unit visibility:public [final,static] declared in kotlin.Unit' type=kotlin.Unit origin=null
        BRANCH
          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.String [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
            arg1: CONST String type=kotlin.String value="android.permission.READ_EXTERNAL_STORAGE"
          then: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                  arg0: GET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:SDK_INT type:kotlin.Int visibility:public [final,static] declared in android.os.Build.VERSION' type=kotlin.Int superQualifierSymbol=android.os.Build.VERSION origin=null
                  arg1: CONST Int type=kotlin.Int value=29
                then: BLOCK type=kotlin.Unit origin=null
                  CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 [operator] declared in kotlin.Function1' type=kotlin.Unit origin=INVOKE
                    $this: GET_VAR 'onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=VARIABLE_AS_FUNCTION
                    p1: CONST Boolean type=kotlin.Boolean value=true
                  RETURN type=kotlin.Nothing from='public final fun AskPermission (permission: kotlin.String, onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in com.example.yaroslavhorach.common.utill.PermissionManager'
                    GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:INSTANCE type:kotlin.Unit visibility:public [final,static] declared in kotlin.Unit' type=kotlin.Unit origin=null
    VAR name:launcher type:androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean> [val]
      CALL 'public final fun rememberLauncherForActivityResult <I, O> (contract: androidx.activity.result.contract.ActivityResultContract<I of androidx.activity.compose.ActivityResultRegistryKt.rememberLauncherForActivityResult, O of androidx.activity.compose.ActivityResultRegistryKt.rememberLauncherForActivityResult>, onResult: kotlin.Function1<O of androidx.activity.compose.ActivityResultRegistryKt.rememberLauncherForActivityResult, kotlin.Unit>): androidx.activity.compose.ManagedActivityResultLauncher<I of androidx.activity.compose.ActivityResultRegistryKt.rememberLauncherForActivityResult, O of androidx.activity.compose.ActivityResultRegistryKt.rememberLauncherForActivityResult> declared in androidx.activity.compose.ActivityResultRegistryKt' type=androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean> origin=null
        <I>: kotlin.String
        <O>: kotlin.Boolean
        contract: CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in androidx.activity.result.contract.ActivityResultContracts.RequestPermission' type=androidx.activity.result.contract.ActivityResultContracts.RequestPermission origin=null
        onResult: GET_VAR 'onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=null
    WHEN type=kotlin.Unit origin=WHEN
      BRANCH
        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
          arg0: CALL 'public open fun checkSelfPermission (p0: @[EnhancedNullability] android.content.Context, p1: @[EnhancedNullability] kotlin.String): kotlin.Int declared in androidx.core.content.ContextCompat' type=kotlin.Int origin=null
            p0: GET_VAR 'val context: android.content.Context [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=android.content.Context origin=null
            p1: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
          arg1: CONST Int type=kotlin.Int value=0
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 [operator] declared in kotlin.Function1' type=kotlin.Unit origin=INVOKE
            $this: GET_VAR 'onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=VARIABLE_AS_FUNCTION
            p1: CONST Boolean type=kotlin.Boolean value=true
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
          $this: CALL 'public abstract fun contains (element: E of kotlin.collections.MutableList): kotlin.Boolean [fake_override,operator] declared in kotlin.collections.MutableList' type=kotlin.Boolean origin=null
            $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:askedPermission type:kotlin.collections.MutableList<kotlin.String> visibility:private [final]' type=kotlin.collections.MutableList<kotlin.String> origin=null
              receiver: GET_VAR '<this>: com.example.yaroslavhorach.common.utill.PermissionManager declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=com.example.yaroslavhorach.common.utill.PermissionManager origin=null
            element: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun SideEffect (effect: kotlin.Function0<kotlin.Unit>): kotlin.Unit declared in androidx.compose.runtime.EffectsKt' type=kotlin.Unit origin=null
            effect: BLOCK type=kotlin.Function0<kotlin.Unit> origin=LAMBDA
              COMPOSITE type=kotlin.Unit origin=null
              CALL 'public final fun <jvm-indy> <T> (dynamicCall: T of kotlin.jvm.internal.<jvm-indy>, bootstrapMethodHandle: kotlin.Any, vararg bootstrapMethodArguments: kotlin.Any): T of kotlin.jvm.internal.<jvm-indy> declared in kotlin.jvm.internal' type=kotlin.Function0<kotlin.Unit> origin=null
                <T>: kotlin.Function0<kotlin.Unit>
                dynamicCall: CALL 'public final fun invoke (p0: androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean>, p1: kotlin.String): kotlin.Function0<kotlin.Unit> declared in kotlin.jvm.internal.invokeDynamic' type=kotlin.Function0<kotlin.Unit> origin=null
                  p0: GET_VAR 'val launcher: androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean> [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean> origin=null
                  p1: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
                bootstrapMethodHandle: CALL 'public final fun <jvm-method-handle> (tag: kotlin.Int, owner: kotlin.String, name: kotlin.String, descriptor: kotlin.String, isInterface: kotlin.Boolean): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                  tag: CONST Int type=kotlin.Int value=6
                  owner: CONST String type=kotlin.String value="java/lang/invoke/LambdaMetafactory"
                  name: CONST String type=kotlin.String value="metafactory"
                  descriptor: CONST String type=kotlin.String value="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
                  isInterface: CONST Boolean type=kotlin.Boolean value=false
                bootstrapMethodArguments: VARARG type=kotlin.Array<kotlin.Any> varargElementType=kotlin.Any
                  CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                    method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): R of kotlin.Function0 [operator] declared in kotlin.Function0' type=kotlin.Any
                  RAW_FUNCTION_REFERENCE 'private final fun AskPermission$lambda$0 ($launcher: androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean>, $permission: kotlin.String): kotlin.Unit? declared in com.example.yaroslavhorach.common.utill.PermissionManager' type=kotlin.Any
                  CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                    method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): kotlin.Unit? [fake_override,operator] declared in kotlin.jvm.internal.invokeDynamic.<fake>' type=kotlin.Any
      BRANCH
        if: CALL 'public open fun shouldShowRequestPermissionRationale (p0: @[EnhancedNullability] kotlin.String): kotlin.Boolean declared in android.app.Activity' type=kotlin.Boolean origin=null
          $this: BLOCK type=android.app.Activity origin=null
            CALL 'public final fun checkNotNull (object: kotlin.Any?, message: kotlin.String): kotlin.Unit declared in kotlin.jvm.internal.Intrinsics' type=kotlin.Unit origin=null
              object: GET_VAR 'val context: android.content.Context [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=android.content.Context origin=null
              message: CONST String type=kotlin.String value="null cannot be cast to non-null type android.app.Activity"
            TYPE_OP type=android.app.Activity? origin=CAST typeOperand=android.app.Activity?
              GET_VAR 'val context: android.content.Context [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=android.content.Context origin=null
          p0: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun SideEffect (effect: kotlin.Function0<kotlin.Unit>): kotlin.Unit declared in androidx.compose.runtime.EffectsKt' type=kotlin.Unit origin=null
            effect: BLOCK type=kotlin.Function0<kotlin.Unit> origin=LAMBDA
              COMPOSITE type=kotlin.Unit origin=null
              CALL 'public final fun <jvm-indy> <T> (dynamicCall: T of kotlin.jvm.internal.<jvm-indy>, bootstrapMethodHandle: kotlin.Any, vararg bootstrapMethodArguments: kotlin.Any): T of kotlin.jvm.internal.<jvm-indy> declared in kotlin.jvm.internal' type=kotlin.Function0<kotlin.Unit> origin=null
                <T>: kotlin.Function0<kotlin.Unit>
                dynamicCall: CALL 'public final fun invoke (p0: androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean>, p1: kotlin.String): kotlin.Function0<kotlin.Unit> declared in kotlin.jvm.internal.invokeDynamic' type=kotlin.Function0<kotlin.Unit> origin=null
                  p0: GET_VAR 'val launcher: androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean> [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean> origin=null
                  p1: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
                bootstrapMethodHandle: CALL 'public final fun <jvm-method-handle> (tag: kotlin.Int, owner: kotlin.String, name: kotlin.String, descriptor: kotlin.String, isInterface: kotlin.Boolean): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                  tag: CONST Int type=kotlin.Int value=6
                  owner: CONST String type=kotlin.String value="java/lang/invoke/LambdaMetafactory"
                  name: CONST String type=kotlin.String value="metafactory"
                  descriptor: CONST String type=kotlin.String value="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
                  isInterface: CONST Boolean type=kotlin.Boolean value=false
                bootstrapMethodArguments: VARARG type=kotlin.Array<kotlin.Any> varargElementType=kotlin.Any
                  CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                    method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): R of kotlin.Function0 [operator] declared in kotlin.Function0' type=kotlin.Any
                  RAW_FUNCTION_REFERENCE 'private final fun AskPermission$lambda$1 ($launcher: androidx.activity.compose.ManagedActivityResultLauncher<kotlin.String, kotlin.Boolean>, $permission: kotlin.String): kotlin.Unit? declared in com.example.yaroslavhorach.common.utill.PermissionManager' type=kotlin.Any
                  CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                    method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): kotlin.Unit? [fake_override,operator] declared in kotlin.jvm.internal.invokeDynamic.<fake>' type=kotlin.Any
      BRANCH
        if: CONST Boolean type=kotlin.Boolean value=true
        then: BLOCK type=kotlin.Unit origin=null
          VAR name:isPushPermission type:kotlin.Boolean [val]
            WHEN type=kotlin.Boolean origin=IF
              BRANCH
                if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                  arg0: GET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:SDK_INT type:kotlin.Int visibility:public [final,static] declared in android.os.Build.VERSION' type=kotlin.Int superQualifierSymbol=android.os.Build.VERSION origin=null
                  arg1: CONST Int type=kotlin.Int value=33
                then: BLOCK type=kotlin.Boolean origin=null
                  CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null
                    arg1: CONST String type=kotlin.String value="android.permission.POST_NOTIFICATIONS"
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Boolean origin=null
                  CONST Boolean type=kotlin.Boolean value=false
          WHEN type=kotlin.Unit origin=IF
            BRANCH
              if: GET_VAR 'val isPushPermission: kotlin.Boolean [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.Boolean origin=null
              then: BLOCK type=kotlin.Unit origin=null
                CALL 'public final fun goToNotificationSettings (context: android.content.Context): kotlin.Unit declared in com.example.yaroslavhorach.common.utill.PermissionManager' type=kotlin.Unit origin=null
                  $this: GET_VAR '<this>: com.example.yaroslavhorach.common.utill.PermissionManager declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=com.example.yaroslavhorach.common.utill.PermissionManager origin=null
                  context: TYPE_OP type=android.app.Activity origin=IMPLICIT_CAST typeOperand=android.app.Activity
                    GET_VAR 'val context: android.content.Context [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=android.content.Context origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: BLOCK type=kotlin.Unit origin=null
                CALL 'public final fun goToSystemSettings (context: android.content.Context): kotlin.Unit declared in com.example.yaroslavhorach.common.utill.PermissionManager' type=kotlin.Unit origin=null
                  $this: GET_VAR '<this>: com.example.yaroslavhorach.common.utill.PermissionManager declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=com.example.yaroslavhorach.common.utill.PermissionManager origin=null
                  context: TYPE_OP type=android.app.Activity origin=IMPLICIT_CAST typeOperand=android.app.Activity
                    GET_VAR 'val context: android.content.Context [val] declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=android.content.Context origin=null
          CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 [operator] declared in kotlin.Function1' type=kotlin.Unit origin=INVOKE
            $this: GET_VAR 'onResult: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=VARIABLE_AS_FUNCTION
            p1: CONST Boolean type=kotlin.Boolean value=false
    CALL 'public final fun plusAssign <T> (element: T of kotlin.collections.CollectionsKt.plusAssign): kotlin.Unit [inline,operator] declared in kotlin.collections.CollectionsKt' type=kotlin.Unit origin=PLUSEQ
      <T>: kotlin.String
      $receiver: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:askedPermission type:kotlin.collections.MutableList<kotlin.String> visibility:private [final]' type=kotlin.collections.MutableList<kotlin.String> origin=null
        receiver: GET_VAR '<this>: com.example.yaroslavhorach.common.utill.PermissionManager declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=com.example.yaroslavhorach.common.utill.PermissionManager origin=null
      element: GET_VAR 'permission: kotlin.String declared in com.example.yaroslavhorach.common.utill.PermissionManager.AskPermission' type=kotlin.String origin=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:48)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:41)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:407)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:424)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:169)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:52)
	... 46 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=android.content.Context origin=GET_PROPERTY
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:163)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:598)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:134)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:735)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:134)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:524)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:529)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:134)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:236)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:124)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:45)
	... 56 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/compose/runtime/CompositionLocal;.getCurrent()Ljava/lang/Object;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:96)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:91)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:43)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:51)
	... 71 more


